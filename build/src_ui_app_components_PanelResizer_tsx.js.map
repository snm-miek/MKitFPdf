{"version":3,"file":"src_ui_app_components_PanelResizer_tsx.js","mappings":";;;;;;;;;;;;;;;AAAiC;AACyC;AAC1E;AACA;AACA,QAAQ,+CAAI;AACZ;AACA,IAAI,wFAAe;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;ACf2B;AACvD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO,qDAAqD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAAM;AAC7B;AACA;AACA,KAAK;AACL,0BAA0B,kDAAW,aAAa,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,kDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,cAAc,+BAA+B;AACjJ,oGAAoG,cAAc,6BAA6B;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAmD;AAC/D;AACA;AACA,YAAY,wBAAwB;AACpC,mDAAmD,SAAS,iBAAiB,2BAA2B,WAAW,UAAU,SAAS,QAAQ,UAAU,QAAQ;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA","sources":["webpack://MkitFPdf/./src/ui/app/components/PanelResizer.tsx","webpack://MkitFPdf/./src/ui/figma-ui-kit/hooks/use-window-resize.ts"],"sourcesContent":["import { emit } from 'utilities';\nimport { useWindowResize } from 'ui/figma-ui-kit/hooks/use-window-resize';\nconst PanelResizer = () => {\n    function onWindowResize(windowSize) {\n        emit('RESIZE_WINDOW', windowSize);\n    }\n    useWindowResize(onWindowResize, {\n        maxHeight: 800,\n        maxWidth: 1200,\n        minHeight: 480,\n        minWidth: 480\n        //resizeBehaviorOnDoubleClick: \"minimize\",\n    });\n    return null;\n};\nexport default PanelResizer;\n","import { useCallback, useEffect, useRef } from 'react';\nconst mapResizeDirectionToStyles = {\n    both: {\n        cursor: 'nwse-resize',\n        height: '12px',\n        width: '12px'\n    },\n    horizontal: {\n        cursor: 'ew-resize',\n        height: '100%',\n        width: '8px'\n    },\n    vertical: {\n        cursor: 'ns-resize',\n        height: '8px',\n        width: '100%'\n    }\n};\nexport function useWindowResize(onWindowResize, options = {}) {\n    const initialHeight = window.innerHeight;\n    const initialWidth = window.innerWidth;\n    const resizeBehaviorOnDoubleClick = typeof options.resizeBehaviorOnDoubleClick === 'undefined'\n        ? null\n        : options.resizeBehaviorOnDoubleClick;\n    const maxHeight = typeof options.maxHeight === 'undefined'\n        ? Number.MAX_VALUE\n        : options.maxHeight;\n    const maxWidth = typeof options.maxWidth === 'undefined'\n        ? Number.MAX_VALUE\n        : options.maxWidth;\n    const minHeight = typeof options.minHeight === 'undefined' ? initialHeight : options.minHeight;\n    const minWidth = typeof options.minWidth === 'undefined' ? initialWidth : options.minWidth;\n    const resizeDirection = typeof options.resizeDirection === 'undefined'\n        ? 'both'\n        : options.resizeDirection;\n    const windowSize = useRef({\n        height: initialHeight,\n        width: initialWidth\n    });\n    const setWindowSize = useCallback(function ({ width, height }) {\n        if (typeof width === 'undefined' && typeof height === 'undefined') {\n            throw new Error('Need at least one of `width` or `height`');\n        }\n        if (typeof width !== 'undefined') {\n            windowSize.current.width = Math.min(maxWidth, Math.max(minWidth, width));\n        }\n        if (typeof height !== 'undefined') {\n            windowSize.current.height = Math.min(maxHeight, Math.max(minHeight, height));\n        }\n        onWindowResize(windowSize.current);\n    }, [maxHeight, maxWidth, minHeight, minWidth, onWindowResize]);\n    const toggleWindowSize = useCallback(function (resizeDirection) {\n        if (resizeDirection === 'horizontal') {\n            if (windowSize.current.width === initialWidth) {\n                // Minimize or maximize if currently at `initialWidth`\n                windowSize.current.width =\n                    resizeBehaviorOnDoubleClick === 'minimize' ? minWidth : maxWidth;\n            }\n            else {\n                // Else restore `initialWidth`\n                windowSize.current.width = initialWidth;\n            }\n            onWindowResize(windowSize.current);\n            return;\n        }\n        if (resizeDirection === 'vertical') {\n            if (windowSize.current.height === initialHeight) {\n                // Minimize or maximize if currently at `initialHeight`\n                windowSize.current.height =\n                    resizeBehaviorOnDoubleClick === 'minimize' ? minHeight : maxHeight;\n            }\n            else {\n                // Else restore `initialHeight`\n                windowSize.current.height = initialHeight;\n            }\n            onWindowResize(windowSize.current);\n            return;\n        }\n        if (windowSize.current.width === initialWidth &&\n            windowSize.current.height === initialHeight) {\n            // Minimize or maximize if currently at `initialWidth` and `initialHeight`\n            windowSize.current.width =\n                resizeBehaviorOnDoubleClick === 'minimize' ? minWidth : maxWidth;\n            windowSize.current.height =\n                resizeBehaviorOnDoubleClick === 'minimize' ? minHeight : maxHeight;\n        }\n        else {\n            // Else restore `initialWidth` and `initialHeight`\n            windowSize.current.width = initialWidth;\n            windowSize.current.height = initialHeight;\n        }\n        onWindowResize(windowSize.current);\n    }, [\n        initialHeight,\n        initialWidth,\n        maxHeight,\n        maxWidth,\n        minHeight,\n        minWidth,\n        onWindowResize,\n        resizeBehaviorOnDoubleClick\n    ]);\n    useEffect(function () {\n        const removeResizeHandleElements = [];\n        const options = {\n            resizeDirection,\n            setWindowSize,\n            toggleWindowSize: resizeBehaviorOnDoubleClick === null ? null : toggleWindowSize\n        };\n        if (resizeDirection === 'both') {\n            removeResizeHandleElements.push(createResizeHandleElement(Object.assign(Object.assign({}, options), { resizeDirection: 'horizontal' })));\n            removeResizeHandleElements.push(createResizeHandleElement(Object.assign(Object.assign({}, options), { resizeDirection: 'vertical' })));\n        }\n        removeResizeHandleElements.push(createResizeHandleElement(options));\n        return function () {\n            for (const removeResizeHandleElement of removeResizeHandleElements) {\n                removeResizeHandleElement();\n            }\n        };\n    }, [\n        maxHeight,\n        maxWidth,\n        minHeight,\n        minWidth,\n        resizeBehaviorOnDoubleClick,\n        resizeDirection,\n        setWindowSize,\n        toggleWindowSize\n    ]);\n    return setWindowSize;\n}\nfunction createResizeHandleElement(options) {\n    const { resizeDirection, setWindowSize, toggleWindowSize } = options;\n    const resizeHandleElement = document.createElement('div');\n    document.body.append(resizeHandleElement);\n    const { cursor, height, width } = mapResizeDirectionToStyles[resizeDirection];\n    resizeHandleElement.style.cssText = `cursor: ${cursor}; position: fixed; z-index: var(--z-index-2); bottom: 0; right: 0; width: ${width}; height: ${height};`;\n    let pointerDownCursorPosition = null;\n    resizeHandleElement.addEventListener('pointerdown', function (event) {\n        pointerDownCursorPosition = {\n            x: event.offsetX,\n            y: event.offsetY\n        };\n        resizeHandleElement.setPointerCapture(event.pointerId);\n    });\n    resizeHandleElement.addEventListener('pointerup', function (event) {\n        pointerDownCursorPosition = null;\n        resizeHandleElement.releasePointerCapture(event.pointerId);\n    });\n    resizeHandleElement.addEventListener('pointermove', function (event) {\n        if (pointerDownCursorPosition === null) {\n            return;\n        }\n        const width = resizeDirection === 'both' || resizeDirection === 'horizontal'\n            ? Math.round(event.clientX +\n                (resizeHandleElement.offsetWidth - pointerDownCursorPosition.x))\n            : undefined;\n        const height = resizeDirection === 'both' || resizeDirection === 'vertical'\n            ? Math.round(event.clientY +\n                (resizeHandleElement.offsetHeight - pointerDownCursorPosition.y))\n            : undefined;\n        setWindowSize({ height, width });\n    });\n    if (toggleWindowSize !== null) {\n        resizeHandleElement.addEventListener('dblclick', function () {\n            toggleWindowSize(resizeDirection);\n        });\n    }\n    return function () {\n        resizeHandleElement.remove();\n    };\n}\n"],"names":[],"sourceRoot":""}